1. Устанавливаем хосты и необходимые пакет с помощью ansible

[pnrusr@redos OSPF]$ vagrant  provision
    router3: Running ansible-playbook...

PLAY [OSPF] ********************************************************************

TASK [Gathering Facts] *********************************************************
ok: [router3]
ok: [router2]
ok: [router1]

TASK [install base tools] ******************************************************
ok: [router3]
ok: [router2]
changed: [router1]

PLAY RECAP *********************************************************************
router1                    : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
router2                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
router3                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   


2. На каждом из трех хостов устанавливаем софт FRR:

root@router1:~# systemctl stop ufw
root@router1:~# systemctl disable ufw
Synchronizing state of ufw.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install disable ufw
Removed /etc/systemd/system/multi-user.target.wants/ufw.service.
root@router1:~# curl -s https://deb.frrouting.org/frr/keys.asc | sudo apt-key add -

OK
root@router1:~# 
root@router1:~# echo deb https://deb.frrouting.org/frr $(lsb_release -s -c) frr-stable > /etc/apt/sources.list.d/frr.list
root@router1:~# apt update
Get:1 http://security.ubuntu.com/ubuntu focal-security InRelease [114 kB]            
Hit:2 http://archive.ubuntu.com/ubuntu focal InRelease                               
Get:3 http://archive.ubuntu.com/ubuntu focal-updates InRelease [114 kB]              
Get:4 http://archive.ubuntu.com/ubuntu focal-backports InRelease [108 kB]            
Get:5 https://deb.frrouting.org/frr focal InRelease [15.6 kB]                        
Get:6 https://deb.frrouting.org/frr focal/frr-stable amd64 Packages [6977 B]         
Fetched 359 kB in 8s (42.8 kB/s)                                                     
Reading package lists... Done
Building dependency tree       
Reading state information... Done
4 packages can be upgraded. Run 'apt list --upgradable' to see them.
root@router1:~# apt install frr frr-pythontools
Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following additional packages will be installed:
  libc-ares2 libyang2
Suggested packages:
  frr-doc
The following NEW packages will be installed:
  frr frr-pythontools libc-ares2 libyang2
0 upgraded, 4 newly installed, 0 to remove and 4 not upgraded.
Need to get 4452 kB of archives.
After this operation, 23.3 MB of additional disk space will be used.
Do you want to continue? [Y/n] y
Get:1 http://archive.ubuntu.com/ubuntu focal-updates/main amd64 libc-ares2 amd64 1.15.0-1ubuntu0.3 [36.8 kB]
..................
Selecting previously unselected package libc-ares2:amd64.
(Reading database ... 63758 files and directories currently installed.)
Preparing to unpack .../libc-ares2_1.15.0-1ubuntu0.3_amd64.deb ...
Unpacking libc-ares2:amd64 (1.15.0-1ubuntu0.3) ...
Selecting previously unselected package libyang2.
Preparing to unpack .../libyang2_2.0.7-1~ubuntu20.04u1_amd64.deb ...
Unpacking frr-pythontools (8.5.1-0~ubuntu20.04.1) ...
Setting up libyang2 (2.0.7-1~ubuntu20.04u1) ...
Setting up libc-ares2:amd64 (1.15.0-1ubuntu0.3) ...
Setting up frr (8.5.1-0~ubuntu20.04.1) ...
Adding group `frrvty' (GID 121) ...
Done.
Adding group `frr' (GID 122) ...
Done.
rectory
Adding system user `frr' (UID 113) ...
Adding new user `frr' (UID 113) with group `frr' ...
Not creating home directory `/nonexistent'.
Created symlink /etc/systemd/system/multi-user.target.wants/frr.service → /lib/systemd
/system/frr.service.
Setting up frr-pythontools (8.5.1-0~ubuntu20.04.1) ...
Processing triggers for libc-bin (2.31-0ubuntu9.9) ...


3. Инсталляция пакета с помощью скрипта ansible

С его помощью установил пакеты и настроил forwarding на router3:

Сам скрипт:

cat instfrr.yml 
- name: OSPF-2
  #Указываем имя хоста или группу, которые будем настраивать
  hosts: all
  #Параметр выполнения модулей от root-пользователя
  become: yes
  #Указание файла с дополнителыми переменными (понадобится при добавлении темплейтов)
  # vars_files:
  #  - defaults/main.yml
  tasks:
 


  - name: Disable ufw service
    service:
      name: ufw
      state: stopped
      enabled: false

  # Добавляем gpg-key репозитория
  - name: add gpg frrouting.org
    apt_key:
      url: "https://deb.frrouting.org/frr/keys.asc"
      state: present

  # Добавляем репозиторий https://deb.frrouting.org/frr
  - name: add frr repo
    apt_repository:
      repo: 'deb https://deb.frrouting.org/frr {{ ansible_distribution_release }} frr-stable'
      state: present
  
  # Обновляем пакеты и устанавливаем FRR
  - name: install FRR packages
    apt:
      name: 
        - frr
        - frr-pythontools
      state: present
      update_cache: true

  # Включаем маршрутизацию транзитных пакетов
  - name: set up forward packages across routers
    sysctl:
      name: net.ipv4.conf.all.forwarding
      value: '1'
      state: present

==> router3: Running provisioner: ansible...
    router3: Running ansible-playbook...

PLAY [OSPF-2] ******************************************************************

TASK [Gathering Facts] *********************************************************
ok: [router2]
ok: [router3]
ok: [router1]

TASK [Disable ufw service] *****************************************************
ok: [router3]
ok: [router2]
ok: [router1]

TASK [add gpg frrouting.org] ***************************************************
ok: [router3]
ok: [router2]
ok: [router1]

TASK [add frr repo] ************************************************************
ok: [router1]
ok: [router3]
ok: [router2]

TASK [install FRR packages] ****************************************************
ok: [router1]
ok: [router2]
changed: [router3]

TASK [set up forward packages across routers] **********************************
ok: [router1]
ok: [router2]
changed: [router3]

PLAY RECAP *********************************************************************
router1                    : ok=6    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
router2                    : ok=6    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
router3                    : ok=6    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   


4. Выполняем  первоначальную настройку /etc/frr/frr.conf скриптом ansible


******************************************************************


Скрипт выполнился успешно за исключением установки опции router_id.

Внес параметр в файл hosts и все отработало успешно:

   router3: Running ansible-playbook...


PLAY [OSPF-3] ******************************************************************

TASK [Gathering Facts] *********************************************************
ok: [router3]
ok: [router2]
ok: [router1]

TASK [base set up OSPF] ********************************************************
ok: [router3]
ok: [router2]
ok: [router1]

TASK [set up OSPF] *************************************************************
changed: [router1]
changed: [router3]
changed: [router2]

TASK [restart FRR] *************************************************************
changed: [router3]
changed: [router2]
changed: [router1]

PLAY RECAP *********************************************************************
router1                    : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
router2                    : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   
router3                    : ok=4    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   


5. Проверяем, что OSPF работает так, как заявлено

root@router1:/etc/frr# traceroute 192.168.30.1
traceroute to 192.168.30.1 (192.168.30.1), 30 hops max, 60 byte packets
 1  192.168.30.1 (192.168.30.1)  2.156 ms  2.374 ms  0.679 ms



Теперь отключим активный интерфейс 

oot@router1:/etc/frr# ifconfig enp0s9 down

root@router1:/etc/frr# traceroute 192.168.30.1
traceroute to 192.168.30.1 (192.168.30.1), 30 hops max, 60 byte packets
 1  10.0.10.2 (10.0.10.2)  1.438 ms  2.924 ms  2.274 ms
 2  192.168.30.1 (192.168.30.1)  5.643 ms  5.007 ms  6.792 ms

Список доступных путей OSPF

root@router1:/etc/frr# vtysh

Hello, this is FRRouting (version 8.5.1).
Copyright 1996-2005 Kunihiro Ishiguro, et al.

router1# show ip route ospf
Codes: K - kernel route, C - connected, S - static, R - RIP,
       O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP,
       T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR,
       f - OpenFabric,
       > - selected route, * - FIB route, q - queued, r - rejected, b - backup
       t - trapped, o - offload failure

O   10.0.10.0/30 [110/100] is directly connected, enp0s8, weight 1, 00:04:21
O>* 10.0.11.0/30 [110/200] via 10.0.10.2, enp0s8, weight 1, 00:01:11
O>* 10.0.12.0/30 [110/300] via 10.0.10.2, enp0s8, weight 1, 00:01:11
O   192.168.10.0/24 [110/100] is directly connected, enp0s10, weight 1, 00:04:21
O>* 192.168.20.0/24 [110/200] via 10.0.10.2, enp0s8, weight 1, 00:04:15
O>* 192.168.30.0/24 [110/300] via 10.0.10.2, enp0s8, weight 1, 00:01:11


6. Настраиваем асимметричный роутинг.

Выставляем высокую стоимость интерфейса
Высокая стоимость заставляет алгоритм роутинга обходить траффик через
"дорогой" интерфейс  по направлению к целевому адресу. Убедимся в этом ниже на примере.

Итак, выставляем высокую стоимость.

router1(config)# int enp0s8
router1(config-if)# ip ospf  cost 1000
router1(config-if)# exit
router1(config)# exit
router1# show ip route ospf
Codes: K - kernel route, C - connected, S - static, R - RIP,
       O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP,
       T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR,
       f - OpenFabric,
       > - selected route, * - FIB route, q - queued, r - rejected, b - backup
       t - trapped, o - offload failure

O   10.0.10.0/30 [110/300] via 10.0.12.2, enp0s9, weight 1, 00:00:15
O>* 10.0.11.0/30 [110/200] via 10.0.12.2, enp0s9, weight 1, 00:00:15
O   10.0.12.0/30 [110/100] is directly connected, enp0s9, weight 1, 00:24:16
O   192.168.10.0/24 [110/100] is directly connected, enp0s10, weight 1, 00:35:30
O>* 192.168.20.0/24 [110/300] via 10.0.12.2, enp0s9, weight 1, 00:00:15
O>* 192.168.30.0/24 [110/200] via 10.0.12.2, enp0s9, weight 1, 00:24:16


Теперь сеть 192.168.20.0 будет доступна через 10.0.12.2, а не через дорогой интерфейс  с путем 10.0.10.2 , как это было раньше

 Делаем пинг с router1,  где мы подняли стоимость интерфейса:

ping -I 192.168.10.1 192.168.20.1
PING 192.168.20.1 (192.168.20.1) from 192.168.10.1 : 56(84) bytes of data.
64 bytes from 192.168.20.1: icmp_seq=1 ttl=64 time=1.25 ms
64 bytes from 192.168.20.1: icmp_seq=2 ttl=64 time=1.60 ms



На router2 видим, что запросы идут по пути с меньшей стоимостью

oot@router2:~# tcpdump -i enp0s9
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on enp0s9, link-type EN10MB (Ethernet), capture size 262144 bytes
13:33:45.032359 IP 192.168.10.1 > router2: ICMP echo request, id 3, seq 6, length 64
13:33:45.211668 ARP, Request who-has router2 tell 10.0.11.1, length 46
13:33:45.211713 ARP, Reply router2 is-at 08:00:27:84:c1:7f (oui Unknown), length 28
13:33:46.049308 IP 192.168.10.1 > router2: ICMP echo request, id 3, seq 7, length 64


А обратно возвращаются другим путем

tcpdump -i enp0s8

13:42:42.012068 IP router2 > 192.168.10.1: ICMP echo reply, id 4, seq 1, length 64
13:42:43.014547 IP router2 > 192.168.10.1: ICMP echo reply, id 4, seq 2, length 64
13:42:44.016231 IP router2 > 192.168.10.1: ICMP echo reply, id 4, seq 3, length 64


7. Настраиваем симметричный роутинг.


    Поскольку в предыдущем примере обратный траффик пошел через интерфейс enp0s8 на router2, то посмотрим, что будет если и его стоимость поднять до 1000.  Сделать это можно с помощью  ansible template  -  frr.conf.j2

Соответствующая строчка:

{% elif ansible_hostname == 'router2' %}
interface enp0s8
ip ospf cost 1000

Запускаем playbook c помощью vagrant provision


До запуска playbook c новой настройкой стоимости интерфейса
 на хосте router2  команда show ip router  показывала

192.168.10.0/24 [110/200] via 10.0.10.1, enp0s8, weight 1, 00:06:06

После изменения веса мы видим:

192.168.10.0/24 [110/300] via 10.0.11.1, enp0s9, weight 1, 00:00:4


То есть  траффик пойдет по более дешевому интерфейсу enp0s9

tcpdump -i enp0s9

08:16:36.329731 IP router2 > 192.168.10.1: ICMP echo reply, id 1, seq 61,


8. Заключение.

Настройки системы произвденеы с помощью скриптов ansible 

Для удобства я разбил эти скрипты на части:

provision - для установки предварительных  пакетов
instfrr - для установки пакета и базовой настройки frr
tunefrr  - для работы с посредством темлейта с установкой стоимостей и рестарта frr.

Всю конфигурацию ansible поместил в отдельный файл ansible.tar

 





